services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: db_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: itau123
    ports: ["5432:5432"]
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: testBrianItau
      RABBITMQ_DEFAULT_PASS: itau123
    ports: ["5672:5672","15672:15672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq]
    healthcheck:
      test: ["CMD","rabbitmq-diagnostics","-q","ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: ["-config.file=/etc/loki/loki-config.yml"]
    volumes:
      - ./observability/loki-config.yml:/etc/loki/loki-config.yml:ro
    ports: ["3100:3100"]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: ["-config.file=/etc/promtail/promtail-config.yml"]
    volumes:
      - ./observability/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports: ["3000:3000"]
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  app:
    build:
      context: ./itau
      dockerfile: Dockerfile
    container_name: itau-app
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_NAME: db_test
      DB_USER: test
      DB_PASS: itau123
      RABBITMQ_HOST: rabbitmq
    restart: unless-stopped

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: itau-gateway
    depends_on:
      app:
        condition: service_started
    environment:
      TARGET_API_URI: http://app:8080
    ports: ["8081:8081"]
    restart: unless-stopped

volumes:
  pgdata:
  rabbitmq_data:
